#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
    reset: '\x1b[0m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    purple: '\x1b[35m',
    cyan: '\x1b[36m',
    bold: '\x1b[1m'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
function colorLog(text, color = 'reset') {
    console.log(`${colors[color]}${text}${colors.reset}`);
}

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥
function getWeekAgoDate() {
    const date = new Date();
    date.setDate(date.getDate() - 7);
    return date.toISOString().split('T')[0];
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
function getTodayDate() {
    return new Date().toISOString().split('T')[0];
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —á—Ç–æ —ç—Ç–æ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
function isValidGitRepo(repoPath) {
    try {
        return fs.existsSync(repoPath) && fs.existsSync(path.join(repoPath, '.git'));
    } catch (error) {
        return false;
    }
}

// –í—ã–ø–æ–ª–Ω–∏—Ç—å git –∫–æ–º–∞–Ω–¥—É –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function execGitCommand(command, repoPath) {
    try {
        const result = execSync(command, { 
            cwd: repoPath, 
            encoding: 'utf-8',
            stdio: ['pipe', 'pipe', 'pipe']
        });
        return result.trim();
    } catch (error) {
        return '';
    }
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
function getRepoStats(repoPath, repoName, weekAgo, today) {
    if (!isValidGitRepo(repoPath)) {
        colorLog(`‚ùå Repository not found or not a git repo: ${repoPath}`, 'red');
        return {
            commits: 0,
            linesAdded: 0,
            linesDeleted: 0,
            filesChanged: 0,
            tags: 0,
            totalCommits: 0,
            totalLinesAdded: 0,
            totalLinesDeleted: 0,
            totalContributors: 0,
            myContribution: 0
        };
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –∞–≤—Ç–æ—Ä–∞
    const author = execGitCommand('git config user.name', repoPath);
    
    colorLog(`\nüìÅ Repository: ${repoName}`, 'blue');
    colorLog(`üìÇ Path: ${repoPath}`, 'blue');
    colorLog(`üë§ Author: ${author}`, 'blue');
    
    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é
    const commitsOutput = execGitCommand(
        `git log --author="${author}" --since="${weekAgo}" --until="${today}" --oneline`,
        repoPath
    );
    
    const commits = commitsOutput ? commitsOutput.split('\n').length : 0;
    colorLog(`üìù Commits: ${commits}`, 'green');
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã
    if (commits > 0) {
        colorLog('Recent commits:', 'yellow');
        const recentCommits = commitsOutput.split('\n').slice(0, 5);
        recentCommits.forEach(commit => {
            if (commit.trim()) {
                console.log(`  ${commit}`);
            }
        });
        console.log();
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç—Ä–æ–∫
    const statsOutput = execGitCommand(
        `git log --author="${author}" --since="${weekAgo}" --until="${today}" --numstat --pretty=format:""`,
        repoPath
    );
    
    let linesAdded = 0;
    let linesDeleted = 0;
    let filesChanged = 0;
    
    if (statsOutput) {
        const lines = statsOutput.split('\n').filter(line => line.trim() && !line.startsWith('commit'));
        filesChanged = lines.length;
        
        lines.forEach(line => {
            const parts = line.split('\t');
            if (parts.length >= 2) {
                const added = parseInt(parts[0]) || 0;
                const deleted = parseInt(parts[1]) || 0;
                linesAdded += added;
                linesDeleted += deleted;
            }
        });
    }
    
    colorLog(`‚ûï Lines added: ${linesAdded}`, 'green');
    colorLog(`‚ûñ Lines deleted: ${linesDeleted}`, 'red');
    colorLog(`üìÑ Files changed: ${filesChanged}`, 'purple');
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
    const tagsOutput = execGitCommand(
        `git tag --list --sort=-creatordate --format='%(creatordate:short) %(refname:short)'`,
        repoPath
    );
    
    let tags = 0;
    if (tagsOutput) {
        const tagLines = tagsOutput.split('\n').filter(line => {
            const parts = line.trim().split(' ');
            if (parts.length >= 2) {
                const tagDate = parts[0];
                return tagDate >= weekAgo;
            }
            return false;
        });
        tags = tagLines.length;
        
        if (tags > 0) {
            colorLog(`üè∑Ô∏è  Tags created: ${tags}`, 'cyan');
            colorLog('Recent tags:', 'yellow');
            tagLines.forEach(tagLine => {
                console.log(`  ${tagLine}`);
            });
        } else {
            colorLog(`üè∑Ô∏è  Tags created: ${tags}`, 'cyan');
        }
    } else {
        colorLog(`üè∑Ô∏è  Tags created: ${tags}`, 'cyan');
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é –∑–∞ –Ω–µ–¥–µ–ª—é (–≤—Å–µ –∞–≤—Ç–æ—Ä—ã)
    const totalStatsOutput = execGitCommand(
        `git log --since="${weekAgo}" --until="${today}" --numstat --pretty=format:""`,
        repoPath
    );
    
    let totalLinesAdded = 0;
    let totalLinesDeleted = 0;
    
    if (totalStatsOutput) {
        const totalLines = totalStatsOutput.split('\n').filter(line => line.trim() && !line.startsWith('commit'));
        totalLines.forEach(line => {
            const parts = line.split('\t');
            if (parts.length >= 2) {
                const added = parseInt(parts[0]) || 0;
                const deleted = parseInt(parts[1]) || 0;
                totalLinesAdded += added;
                totalLinesDeleted += deleted;
            }
        });
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é
    const totalCommitsOutput = execGitCommand(
        `git log --since="${weekAgo}" --until="${today}" --oneline`,
        repoPath
    );
    const totalCommits = totalCommitsOutput ? totalCommitsOutput.split('\n').filter(line => line.trim()).length : 0;
    
    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é
    const contributorsOutput = execGitCommand(
        `git log --since="${weekAgo}" --until="${today}" --format="%an" | sort | uniq`,
        repoPath
    );
    const totalContributors = contributorsOutput ? contributorsOutput.split('\n').filter(line => line.trim()).length : 0;
    
    // –í—ã—á–∏—Å–ª–∏—Ç—å –º–æ–π –≤–∫–ª–∞–¥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    const myContribution = totalLinesAdded > 0 ? ((linesAdded / totalLinesAdded) * 100) : 0;
    
    console.log('\n---\n');
    
    return {
        commits,
        linesAdded,
        linesDeleted,
        filesChanged,
        tags,
        totalCommits,
        totalLinesAdded,
        totalLinesDeleted,
        totalContributors,
        myContribution
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ markdown —Ç–∞–±–ª–∏—Ü—ã
function generateMarkdownTable(repositories, allStats, totalStats, weekAgo, today) {
    let markdown = `# Weekly Git Statistics Report\n\n`;
    markdown += `**Period:** ${weekAgo} to ${today}\n`;
    markdown += `**Generated:** ${new Date().toLocaleString()}\n\n`;
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    markdown += `## Repository Statistics\n\n`;
    markdown += `| Repository | My Commits | My Lines +/- | Total Commits | Total Lines +/- | Contributors | My Contribution % |\n`;
    markdown += `|------------|------------|--------------|---------------|-----------------|--------------|-------------------|\n`;
    
    allStats.forEach((stats, index) => {
        const repo = repositories[index];
        const myNetChange = stats.linesAdded - stats.linesDeleted;
        const totalNetChange = stats.totalLinesAdded - stats.totalLinesDeleted;
        const myChangeStr = myNetChange >= 0 ? `+${myNetChange}` : `${myNetChange}`;
        const totalChangeStr = totalNetChange >= 0 ? `+${totalNetChange}` : `${totalNetChange}`;
        const contributionStr = stats.myContribution.toFixed(1);
        
        markdown += `| ${repo.name} | ${stats.commits} | +${stats.linesAdded}/-${stats.linesDeleted} (${myChangeStr}) | ${stats.totalCommits} | +${stats.totalLinesAdded}/-${stats.totalLinesDeleted} (${totalChangeStr}) | ${stats.totalContributors} | ${contributionStr}% |\n`;
    });
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const myTotalNetChange = totalStats.linesAdded - totalStats.linesDeleted;
    const globalTotalNetChange = totalStats.totalLinesAdded - totalStats.totalLinesDeleted;
    const myTotalChangeStr = myTotalNetChange >= 0 ? `+${myTotalNetChange}` : `${myTotalNetChange}`;
    const globalTotalChangeStr = globalTotalNetChange >= 0 ? `+${globalTotalNetChange}` : `${globalTotalNetChange}`;
    const overallContribution = totalStats.totalLinesAdded > 0 ? ((totalStats.linesAdded / totalStats.totalLinesAdded) * 100) : 0;
    
    markdown += `| **TOTAL** | **${totalStats.commits}** | **+${totalStats.linesAdded}/-${totalStats.linesDeleted} (${myTotalChangeStr})** | **${totalStats.totalCommits}** | **+${totalStats.totalLinesAdded}/-${totalStats.totalLinesDeleted} (${globalTotalChangeStr})** | **${totalStats.totalContributors}** | **${overallContribution.toFixed(1)}%** |\n\n`;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    markdown += `## Summary\n\n`;
    markdown += `- **My Activity:**\n`;
    markdown += `  - Commits: ${totalStats.commits}\n`;
    markdown += `  - Files changed: ${totalStats.filesChanged}\n`;
    markdown += `  - Tags created: ${totalStats.tags}\n`;
    markdown += `  - Net code change: ${myTotalChangeStr} lines\n\n`;
    
    markdown += `- **Team Activity:**\n`;
    markdown += `  - Total commits: ${totalStats.totalCommits}\n`;
    markdown += `  - Total contributors: ${totalStats.totalContributors}\n`;
    markdown += `  - Total net change: ${globalTotalChangeStr} lines\n\n`;
    
    markdown += `- **My Contribution:**\n`;
    markdown += `  - Overall contribution to codebase changes: ${overallContribution.toFixed(1)}%\n`;
    markdown += `  - Average contribution per repository: ${(overallContribution / repositories.length).toFixed(1)}%\n\n`;
    
    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º
    markdown += `## Activity Breakdown\n\n`;
    allStats.forEach((stats, index) => {
        const repo = repositories[index];
        if (stats.commits > 0) {
            markdown += `### ${repo.name}\n`;
            markdown += `- My commits: ${stats.commits} (${((stats.commits / stats.totalCommits) * 100).toFixed(1)}% of total)\n`;
            markdown += `- My lines: +${stats.linesAdded}/-${stats.linesDeleted}\n`;
            markdown += `- Repository total: +${stats.totalLinesAdded}/-${stats.totalLinesDeleted}\n`;
            markdown += `- Contributors: ${stats.totalContributors}\n`;
            markdown += `- My contribution: ${stats.myContribution.toFixed(1)}%\n\n`;
        }
    });
    
    return markdown;
}

// –ü–∞—Ä—Å–∏—Ç—å —Ñ–∞–π–ª repositories.md
function parseRepositoriesFile() {
    const scriptDir = __dirname;
    const repositoriesFile = path.join(scriptDir, 'repositories.md');
    
    if (!fs.existsSync(repositoriesFile)) {
        colorLog('‚ùå File repositories.md not found in scripts directory', 'red');
        process.exit(1);
    }
    
    const content = fs.readFileSync(repositoriesFile, 'utf-8');
    const lines = content.split('\n');
    const repositories = [];
    
    lines.forEach(line => {
        // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "1. Huly.core: /path/to/repo"
        const match = line.match(/^(\d+)\.\s+([^:]+):\s+(.+)$/);
        if (match) {
            const repoName = match[2].trim();
            const repoPath = match[3].trim();
            repositories.push({ name: repoName, path: repoPath });
        }
    });
    
    return repositories;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    const weekAgo = getWeekAgoDate();
    const today = getTodayDate();
    
    colorLog('=== Git Statistics for the Last Week ===', 'cyan');
    colorLog(`Period: ${weekAgo} to ${today}`, 'cyan');
    colorLog('', 'reset');
    
    const repositories = parseRepositoriesFile();
    
    if (repositories.length === 0) {
        colorLog('‚ùå No repositories found in repositories.md', 'red');
        process.exit(1);
    }
    
    // –û–±—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏
    let totalStats = {
        commits: 0,
        linesAdded: 0,
        linesDeleted: 0,
        filesChanged: 0,
        tags: 0,
        totalCommits: 0,
        totalLinesAdded: 0,
        totalLinesDeleted: 0,
        totalContributors: 0
    };
    
    const allStats = [];
    
    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    repositories.forEach(repo => {
        const stats = getRepoStats(repo.path, repo.name, weekAgo, today);
        allStats.push(stats);
        
        totalStats.commits += stats.commits;
        totalStats.linesAdded += stats.linesAdded;
        totalStats.linesDeleted += stats.linesDeleted;
        totalStats.filesChanged += stats.filesChanged;
        totalStats.tags += stats.tags;
        totalStats.totalCommits += stats.totalCommits;
        totalStats.totalLinesAdded += stats.totalLinesAdded;
        totalStats.totalLinesDeleted += stats.totalLinesDeleted;
        totalStats.totalContributors = Math.max(totalStats.totalContributors, stats.totalContributors);
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    colorLog('=== üìä TOTAL STATISTICS ===', 'cyan');
    colorLog(`üìù Total commits: ${totalStats.commits}`, 'green');
    colorLog(`‚ûï Total lines added: ${totalStats.linesAdded}`, 'green');
    colorLog(`‚ûñ Total lines deleted: ${totalStats.linesDeleted}`, 'red');
    colorLog(`üìÑ Total files changed: ${totalStats.filesChanged}`, 'purple');
    colorLog(`üè∑Ô∏è  Total tags created: ${totalStats.tags}`, 'cyan');
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —á–∏—Å—Ç–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
    const netChange = totalStats.linesAdded - totalStats.linesDeleted;
    if (netChange >= 0) {
        colorLog(`üìà Net lines change: +${netChange}`, 'green');
    } else {
        colorLog(`üìâ Net lines change: ${netChange}`, 'red');
    }
    
    console.log();
    colorLog(`Generated on: ${new Date().toLocaleString()}`, 'cyan');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å markdown –æ—Ç—á–µ—Ç
    const markdown = generateMarkdownTable(repositories, allStats, totalStats, weekAgo, today);
    const reportPath = path.join(__dirname, `weekly-report-${today}.md`);
    
    try {
        fs.writeFileSync(reportPath, markdown);
        colorLog(`\nüìÑ Markdown report saved to: ${reportPath}`, 'green');
    } catch (error) {
        colorLog(`\n‚ùå Failed to save markdown report: ${error.message}`, 'red');
    }
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
main();